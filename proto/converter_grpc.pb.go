// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/converter.proto

package converterProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConverterService_ConvertVideo_FullMethodName = "/converterProto.ConverterService/ConvertVideo"
)

// ConverterServiceClient is the client API for ConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverterServiceClient interface {
	ConvertVideo(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (ConverterService_ConvertVideoClient, error)
}

type converterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConverterServiceClient(cc grpc.ClientConnInterface) ConverterServiceClient {
	return &converterServiceClient{cc}
}

func (c *converterServiceClient) ConvertVideo(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (ConverterService_ConvertVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConverterService_ServiceDesc.Streams[0], ConverterService_ConvertVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &converterServiceConvertVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConverterService_ConvertVideoClient interface {
	Recv() (*ConvertResponse, error)
	grpc.ClientStream
}

type converterServiceConvertVideoClient struct {
	grpc.ClientStream
}

func (x *converterServiceConvertVideoClient) Recv() (*ConvertResponse, error) {
	m := new(ConvertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverterServiceServer is the server API for ConverterService service.
// All implementations should embed UnimplementedConverterServiceServer
// for forward compatibility
type ConverterServiceServer interface {
	ConvertVideo(*ConvertRequest, ConverterService_ConvertVideoServer) error
}

// UnimplementedConverterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConverterServiceServer struct {
}

func (UnimplementedConverterServiceServer) ConvertVideo(*ConvertRequest, ConverterService_ConvertVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertVideo not implemented")
}

// UnsafeConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverterServiceServer will
// result in compilation errors.
type UnsafeConverterServiceServer interface {
	mustEmbedUnimplementedConverterServiceServer()
}

func RegisterConverterServiceServer(s grpc.ServiceRegistrar, srv ConverterServiceServer) {
	s.RegisterService(&ConverterService_ServiceDesc, srv)
}

func _ConverterService_ConvertVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConvertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConverterServiceServer).ConvertVideo(m, &converterServiceConvertVideoServer{stream})
}

type ConverterService_ConvertVideoServer interface {
	Send(*ConvertResponse) error
	grpc.ServerStream
}

type converterServiceConvertVideoServer struct {
	grpc.ServerStream
}

func (x *converterServiceConvertVideoServer) Send(m *ConvertResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConverterService_ServiceDesc is the grpc.ServiceDesc for ConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "converterProto.ConverterService",
	HandlerType: (*ConverterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertVideo",
			Handler:       _ConverterService_ConvertVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/converter.proto",
}
